import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author eeydt
 */
public class FractalPanel extends javax.swing.JPanel {
    
    private static final Color DRAWING_RECT_COLOR = new Color(200, 200, 255);
    private Rectangle rect = null;
    private boolean rectIsDrawing = false;

    /**
     * Creates new form FractalPanel
     */
    public FractalPanel() {
        initComponents();
    }
    
    //Fractal structure variables
    private double x0 = -2.5;
    private double x1 = +2.5;
    private double y0 = -2.5;
    private double y1 = +2.5;
    
    public void resetVar(){
        x0 = -2.5;
        x1 = +2.5;
        y0 = -2.5;
        y1 = +2.5;
    }
      
    //Drawn Image varible
    private BufferedImage I;
    
    void updateImage(){ 
        int w = getWidth();
        int h = getHeight();
        I = new BufferedImage(w,h,BufferedImage.TYPE_INT_RGB);
        
        for(int i = 0; i < w; ++i){
            for(int j = 0; j < h; ++j) {
		double x = x0 + i / (double)w * (x1-x0);
		double y = y0 + (h-j) / (double)h * (y1-y0);
		double zx = 0;
		double zy = 0;
		int iter = 512;
		while(zx*zx + zy*zy < 4 && iter > 0) {
                    double zx_new = zx*zx - zy*zy + x;
                    double zy_new = 2*zx*zy + y;
                    zx = zx_new;
                    zy = zy_new;
                    --iter;
		}
		I.setRGB(i, j, iter | (iter << 8) | (iter << 16));
	}
    }
    }
    
    @Override
    public void paintComponent(Graphics g){
        //g.drawImage(I, 0, 0, this);
        super.paintComponent(g);
        Graphics2D g2 = (Graphics2D)g;
        if (I != null) {
            g.drawImage(I, 0, 0, this);
        }
        
        if(rectIsDrawing){
            g2.setColor(DRAWING_RECT_COLOR);
            g2.draw(rect);
        }else{
            rect = null;
        }
    }
        
    
   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        setPreferredSize(new java.awt.Dimension(200, 200));
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 398, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 298, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    
    //Coordinate Variables
    private int cx0;
    private int cy0;
    private int cx1;
    private int cy1;
    
    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        // TODO add your handling code here:
        cx0 = (int) evt.getX();
        cy0 = (int) evt.getY();
    }//GEN-LAST:event_formMousePressed

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
        // TODO add your handling code here:
        int w = I.getWidth();
        int h = I.getHeight();
        cx1 = (int) evt.getX();
        cy1 = (int) evt.getY();
        
        rectIsDrawing = false;
        
        double _x0 = x0;
        double _x1 = x1;
        double _y0 = y0;
        double _y1 = y1; // Temporary variables
        
        System.out.println("before\n" + "x0: " + x0 + "\nx1: " + x1 + "\ny0: " + y0 + "\ny1: " + y1);
        if(cx0<cx1){
            _x0 = (double) x0 + ((cx0)*(x1-x0)/w);
            _x1 = (double) x0 + ((cx1)*(x1-x0)/w);
        }else if(cx0>cx1){
            _x0 = (double) x0 + ((cx1)*(x1-x0)/w);
            _x1 = (double) x0 + ((cx0)*(x1-x0)/w);
        }
        
        if(cy0<cx1){
            _y0 = (double) y1 + ((cy1)*(y0-y1)/h);
            _y1 = (double) y1 + ((cy0)*(y0-y1)/h);
        }else if(cy0>cy1){
            _y0 = (double) y1 + ((cy0)*(y0-y1)/h);
            _y1 = (double) y1 + ((cy1)*(y0-y1)/h);
        }
        
        x0 = _x0;
        x1 = _x1;
        y0 = _y0;
        y1 = _y1;
        
        System.out.println("after\n" + "x0: " + x0 + "\nx1: " + x1 + "\ny0: " + y0 + "\ny1: " + y1);
        
        updateImage();
        repaint();
    }//GEN-LAST:event_formMouseReleased

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        // TODO add your handling code here:
        cx1 = evt.getX();
        cy1 = evt.getY();
        rect = makeRectangle(cx0, cy0, cx1, cy1);
        rectIsDrawing = true;
        repaint();
    }//GEN-LAST:event_formMouseDragged
    private Rectangle makeRectangle(int x1, int y1, int x2, int y2) {
      return new Rectangle (Math.min(x1, x2), Math.min(y1, y2), Math.abs(x1 - x2), Math.abs(y1 - y2));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
